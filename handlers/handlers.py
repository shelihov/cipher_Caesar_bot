from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from keyboards.keyboards import main_kb, language_kb
from lexicon.lexicon import LEXICON

router = Router()
user_data = {}

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(Command("start"))
async def process_start_command(message: Message):
    user_id = message.from_user.id
    user_data[user_id] = {
        'cipher_mode': '',
        'language': '',
        'choice_digit': 0
    }
    await message.answer(LEXICON['start'], reply_markup=main_kb)

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
@router.message(Command("help"))
async def process_help_command(message: Message):
    await message.answer(LEXICON['help'])

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
@router.message(F.text.in_(['–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µüîê', '–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µüîì']))
async def process_cipher(message: Message):
    user_id = message.from_user.id
    choise_user = message.text
    user_data[user_id]['cipher_mode'] = choise_user
    await message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {choise_user}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:', reply_markup=language_kb)

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
@router.message(F.text.in_(["–†—É—Å—Å–∫–∏–πüá∑üá∫", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–πüá∫üá≤"]))
async def process_russian_language(message: Message):
    user_id = message.from_user.id
    language_user = message.text
    user_data[user_id]['language'] = language_user
    await message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —è–∑—ã–∫: {language_user}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —à–∞–≥ —Å–¥–≤–∏–≥–∞ (–≤–ø—Ä–∞–≤–æ):')

# –•–µ–Ω–¥–ª–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —à–∞–≥–æ–º —Å–¥–≤–∏–≥–∞
@router.message(F.text.regexp(r'^[1-9]\d*$'))
async def process_choise_digit(message: Message):
    user_id = message.from_user.id
    choice_digit_user = message.text
    user_data[user_id]['choice_digit'] = choice_digit_user
    await message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —à–∞–≥ —Å–¥–≤–∏–≥–∞: {choice_digit_user}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:')

eng_lower_alphabet = 'abcdefghijklmnopqrstuvwxyz'
eng_upper_alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
rus_lower_alphabet = "–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
rus_upper_alphabet = "–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"

#–•–µ–Ω–¥–ª–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
@router.message(F.text)
async def process_cipher(message: Message):
    user_id = message.from_user.id
    text_user = message.text
    result = ''

    for i in range(len(text_user)):

        if user_data[user_id]['language'] == '–†—É—Å—Å–∫–∏–πüá∑üá∫':
            alphas = 32
            low_alphabet = rus_lower_alphabet
            upp_alphabet = rus_upper_alphabet
        if user_data[user_id]['language'] == '–ê–Ω–≥–ª–∏–π—Å–∫–∏–πüá∫üá≤':
            alphas = 26
            low_alphabet = eng_lower_alphabet
            upp_alphabet = eng_upper_alphabet
                
        if text_user[i].isalpha():
            if text_user[i] == text_user[i].lower():
                place = low_alphabet.index(text_user[i])
            if text_user[i] == text_user[i].upper():
                place = upp_alphabet.index(text_user[i])

            if user_data[user_id]['cipher_mode'] == '–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µüîê':
                index = (place + int(user_data[user_id]['choice_digit'])) % alphas
                
            elif user_data[user_id]['cipher_mode'] == '–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µüîì':
                index = (place - int(user_data[user_id]['choice_digit'])) % alphas

            if text_user[i] == text_user[i].lower():
                result += low_alphabet[index]
            if text_user[i] == text_user[i].upper():
                result += upp_alphabet[index]    

        else:
            result += text_user[i]

    await message.answer(f'{result}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è, –ª–∏–±–æ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–Ω–æ–≤–æ: /start')






# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ callback_query
@router.callback_query(F.data == "button1")
async def process_button1(callback: CallbackQuery):
    await callback.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É 1!")

@router.callback_query(F.data == "button2")
async def process_button2(callback: CallbackQuery):
    await callback.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É 2!") 